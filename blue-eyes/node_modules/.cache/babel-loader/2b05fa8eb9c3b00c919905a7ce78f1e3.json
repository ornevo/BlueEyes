{"ast":null,"code":"var _jsxFileName = \"/home/ororor012/Desktop/Development/Projects/BlueEyesShugarmanHackathon/code/blue-eyes/src/components/stateless/WordTokenList.jsx\";\nimport Constants from \"../../constants\"; // If wordsIds is supplied, will use it as the list. otherwise will use words, which is the full word object array\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function WordTokenList(_ref) {\n  let {\n    wordIds,\n    words\n  } = _ref;\n  const toIterOn = wordIds ? wordIds : words.map(w => w.id);\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: toIterOn.map(wId => {\n      let word = words.find(w => w.id === wId);\n      if (!word) return \"\";\n      return /*#__PURE__*/_jsxDEV(Token, {\n        color: Constants.SEVERITY_TO_COLOR[word.severity],\n        children: word.word\n      }, word.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 28\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n}\n_c = WordTokenList;\n\nvar _c;\n\n$RefreshReg$(_c, \"WordTokenList\");","map":{"version":3,"sources":["/home/ororor012/Desktop/Development/Projects/BlueEyesShugarmanHackathon/code/blue-eyes/src/components/stateless/WordTokenList.jsx"],"names":["Constants","WordTokenList","wordIds","words","toIterOn","map","w","id","wId","word","find","SEVERITY_TO_COLOR","severity"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,iBAAtB,C,CAGA;;;AACA,eAAe,SAASC,aAAT,OAA2C;AAAA,MAApB;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAoB;AACtD,QAAMC,QAAQ,GAAGF,OAAO,GAAGA,OAAH,GAAaC,KAAK,CAACE,GAAN,CAAUC,CAAC,IAAIA,CAAC,CAACC,EAAjB,CAArC;AACA,sBACI;AAAA,cAEQH,QAAQ,CAACC,GAAT,CAAaG,GAAG,IAAI;AAChB,UAAIC,IAAI,GAAGN,KAAK,CAACO,IAAN,CAAWJ,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASC,GAAzB,CAAX;AACA,UAAG,CAACC,IAAJ,EAAU,OAAO,EAAP;AACV,0BAAO,QAAC,KAAD;AAAO,QAAA,KAAK,EAAET,SAAS,CAACW,iBAAV,CAA4BF,IAAI,CAACG,QAAjC,CAAd;AAAA,kBAAyEH,IAAI,CAACA;AAA9E,SAA+DA,IAAI,CAACF,EAApE;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAJD;AAFR;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;KAbuBN,a","sourcesContent":["import Constants from \"../../constants\";\n\n\n// If wordsIds is supplied, will use it as the list. otherwise will use words, which is the full word object array\nexport default function WordTokenList({ wordIds, words }) {\n    const toIterOn = wordIds ? wordIds : words.map(w => w.id);\n    return (\n        <span>\n            {\n                toIterOn.map(wId => {\n                    let word = words.find(w => w.id === wId);\n                    if(!word) return \"\";\n                    return <Token color={Constants.SEVERITY_TO_COLOR[word.severity]} key={word.id}>{word.word}</Token>;\n                })\n            }\n        </span>\n    )\n}"]},"metadata":{},"sourceType":"module"}